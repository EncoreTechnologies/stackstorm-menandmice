---
version: 1.0

description: Test IP Address to verify it is available to use in Men&Mice

input:
  - connection
  - server
  - username
  - password
  - port
  - transport
  - session
  - ip_address
  - range_name

vars:
  - err_message: ""

output:
  - error: "{{ ctx().err_message }}"

tasks:
  main:
    action: core.noop
    next:
      - when: "{{ succeeded() and (ctx().session == '') }}"
        do:
          - login
      - when: "{{ succeeded() and (ctx().session != '') }}"
        do:
          - get_range

  login:
    action: menandmice.login
    input:
      connection: "{{ ctx().connection }}"
      server: "{{ ctx().server }}"
      username: "{{ ctx().username }}"
      password: "{{ ctx().password }}"
      port: "{{ ctx().port }}"
      transport: "{{ ctx().transport }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - session: "{{ result().result.session }}"
        do:
          - get_range
      - when: "{{ failed() }}"
        publish:
          - err_message: "Could not login to menandmice"

  get_range:
    action: menandmice.get_ranges
    input:
      server: "{{ ctx().server }}"
      session: "{{ ctx().session }}"
      transport: "{{ ctx().transport }}"
      filter: "^{{ ctx().range_name }}$"
    next:
      - when: "{{ succeeded() and (result().result.totalResults == 1) }}"
        publish:
          - range_ref: "{{ result().result.ranges.range[0].ref }}"
        do:
          - get_ip_address
      - when: "{{ succeeded() and (result().result.totalResults != 1) }}"
        publish:
          - err_message: "Range does not exist"
        do:
          - fail

  get_ip_address:
    action: menandmice.get_ipam_records
    input:
      server: "{{ ctx().server }}"
      session: "{{ ctx().session }}"
      transport: "{{ ctx().transport }}"
      filter: "^{{ ctx().ip_address }}$"
      range_ref: "{{ ctx().range_ref }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - num_results: "{{ result().result.totalResults == 1 }}"
          - record_state: "{{ result().result.ipamRecords.ipamRecord[0].state.lower() }}"
          - record_claimed: "{{ result().result.ipamRecords.ipamRecord[0].claimed }}"
        do:
          - test_address
      - when: "{{ failed() }}" # TODO: REMOVE?
        publish:
          - err_message: "Could not retrieve ipam records"

  test_address:
    action: core.noop
    next:
      - when: "{{ succeeded() and (ctx().num_results == 1 and ctx().record_state == 'free' and ctx().record_claimed == false) }}"
        do:
          - noop
      - when: "{{ succeeded() and (ctx().num_results != 1 or ctx().record_state == 'assigned' or ctx().record_claimed == true) }}"
        publish:
          - err_message: "IP address is either assigned or claimed already"
        do:
          - fail
